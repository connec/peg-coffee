# Matches an entire grammar
Grammar:
  head:Rule tail:(NEWLINE NEWLINE Rule)* ->
    parser         = class extends Parser
    parser::Start  = head.content
    parser::[name] = content for { name, content } in [ head ].concat @extract tail, 2
    parser

# Matches a single rule in the grammar, including comments
Rule:
  comments:(Comment / EMPTY_LINE)* name:RuleIdentifier ':' INDENT def:RuleContent ->
    name:     name
    content:  def
    comments: @compact comments

# Matches the content of a rule
RuleContent:
  head:RuleLine tail:( NEWLINE '/' SPACE RuleLine )+ INDENT action:Action ->
    lines = [ head ].concat @extract tail, 3
    -> @action @any, lines, action
/ head:RuleLine tail:( NEWLINE '/' SPACE RuleLine )+ ->
    lines = [ head ].concat @extract tail, 3
    -> @any lines
/ expr:RuleLine INDENT action:Action ->
    -> @action expr, action
/ RuleLine

# Matches a single line in a rule
RuleLine:
  expr:Expression SPACE+ action:Action ->
    -> @action expr, action
/ Expression

# Matches a single expression
Expression:
  head:Sequence tail:( SPACE+ '/' SPACE+ Sequence )+ ->
    sequences = [ head ].concat @extract tail, 3
    -> @any sequences
/ Sequence

# Matches a sequence of non-choice expressions
Sequence:
  head:Label tail:( SPACE+ Label )+ ->
    labels = [ head ].concat @extract tail, 1
    -> @all labels
/ Label

# Matches a labelled expression
Label:
  label:LabelIdentifier ':' expr:Prefix ->
    -> @label label, expr
/ Prefix

# Matches a prefixed expression
Prefix:
  prefix:[&!] expr:Suffix ->
    switch prefix
      when '&' then -> @check expr
      when '!' then -> @reject expr
/ Suffix

# Matches a suffixed expression
Suffix:
  expr:Primary suffix:[?*+] ->
    switch suffix
      when '?' then -> @maybe expr
      when '*' then -> @maybe_some expr
      when '+' then -> @some expr
/ Primary

# Matches a 'primary' expression
Primary:
  '(' expr:SubExpression ')' -> expr
/ RuleIdentifier             -> -> @[$$]()
/ Literal
/ Class
/ '.'                        -> -> @advance()
/ '~'                        -> -> @pass()

# Matches the contents of a parenthesised sub expression
SubExpression:
  SPACE expr:Expression SPACE -> expr
/ Expression

# Matches code in one of two formats:
# - block
# - inline
Action:
  '->' DOUBLE_INDENT !WHITESPACE . ( !NEWLINE . / ( !DOUBLE_INDENT WHITESPACE )* DOUBLE_INDENT )*
/ '->' SPACE+ ( !NEWLINE . )+
  ->
    code$ = @join($$[1..]).trim().replace /^    /gm, ''
    (context) ->
      eval "var #{k} = v" for own k, v of context
      eval require('coffee-script').compile code$, bare: true

# Matches a comment
Comment:
  '#' content:( !NEWLINE . )* NEWLINE ->
    @join(content).trim()

# Matches an identifier for a rule
RuleIdentifier:
  [A-Z] [_a-zA-Z]* -> @join $$

# Matches an identifier for a label
LabelIdentifier:
  [_a-z]+ -> @join $$

# Matches a quoted string
Literal:
  "'" content:( ( '\\' / !"'" ) . )* "'"
/ '"' content:( ( '\\' / !'"' ) . )* '"'
  ->
    literal = @unescape @join content
    -> @literal literal

# Matches a character class
Class:
  '[' content:( ( '\\' / !']' ) . )* ']' ->
    regex = /// ^ [#{@unescape @join content}] ///
    -> @regex regex

# Matches a double index
DOUBLE_INDENT:
  INDENT SPACE SPACE

# Matches an indent
INDENT:
  NEWLINE SPACE SPACE

# Matches whitespace followed eventually by a newline
EMPTY_LINE:
  SPACE* NEWLINE

# Matches a single whitespace character
WHITESPACE:
  NEWLINE / SPACE

# Matches a single newline
NEWLINE:
  '\r' '\n'? / '\n' -> '\n'

# Matches a single space
SPACE:
  ' '